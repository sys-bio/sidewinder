unit uTestLSODA_JS;

interface

uses
  System.SysUtils, System.Classes, JS, Web, WEBLib.Graphics, WEBLib.Controls,
  WEBLib.Forms, WEBLib.Dialogs, Vcl.Controls, Vcl.StdCtrls, WEBLib.StdCtrls,
  System.Generics.Collections, LSODA.test, adamsbdf, uVector, uTestCase, uTests.TestUtils;

const TESTS = 3;
type
  TArrD = array of double;
  TLSODA_JSTests = class

  private
    LSODAeqs: TList<string>;
    LSODAspecies: TList<TArrD>;
    LSODAparams: TList<TArrD>;
    lode: TLsoda;
    solverOutput: string;
    refResultsList: TList<string>;
    function getInitialValues(values:array of double): array of double;
    procedure buildReferenceResults();
  public
    resultInfo: TList<string>;
    testResultList: TList<TTestCaseResult>;
    constructor create;
    function  LSODATests(): TList<TTestCaseResult>;
    procedure runTest(eqs: string; species: array of double; params: array of double;
                         testIndex: integer);
    function getReferenceResult(index: integer): string;
  end;

var


implementation


constructor TLSODA_JSTests.create;
var i: integer;
    a,b: array of double;

begin
  self.buildReferenceResults;
  testResultList := TList<TTestCaseResult>.create;
  LSODAspecies := TList<TArrD>.create;
  LSODAparams := TList<TArrD>.create;
  LSODAeqs := TList<string>.create;
  // TEST 1:
  LSODAeqs.Add('let dydt_s = pas.uVector.TVector.$create("create$1",[s.length]);'+
              'dydt_s.setVal(2, (1)*(1)* (p[0] * Math.pow(s[0], 1)));' +
              'dydt_s.setVal(3, (1)*(1)* (p[0] * Math.pow(s[0], 1))+  (-1)*(1)* (p[1] * Math.pow(s[2], 1)));' +
              'dydt_s.setVal(1, (-1)*(1)* (p[0] * Math.pow(s[0], 1)));' +
              'dydt_s.setVal(4, (1)*(1)* (p[1] * Math.pow(s[2], 1))); return dydt_s;');
  SetLength(a,4);
  a[0] := 11; a[1] := 0.5; a[2] := 0; a[3] := 0;
  LSODAspecies.Add(Copy(a,0,MaxInt));
  setLength(b, 2);
  b[0] := 1.0; b[1] := 1.0;
  LSODAparams.Add(Copy(b,0,MaxInt));

  // TEST 2:   Same eq as 1.
  LSODAeqs.Add(LSODAeqs.Items[0]);
  a[0] := 11; a[1] := 0.5; a[2] := 0.2; a[3] := 0.1;
  LSODAspecies.Add(Copy(a,0,MaxInt));
  b[0] := 1.0; b[1] := 1.0;
  LSODAparams.Add(Copy(b,0,MaxInt));

  // TEST 3:
  LSODAeqs.Add('let dydt_s = pas.uVector.TVector.$create("create$1",[s.length]); ' +
               'dydt_s.setVal(1, (1)*(1)* (p[13] * p[0])+  (1)*(1)* (p[13] * p[1] * p[2])+  (-1)*(1)* (p[13] * (p[3] * Math.pow(s[0], p[4]) / (Math.pow(p[5], p[4]) + Math.pow(s[0], p[4]))))+' +
               '  (1)*(1)* (p[14] * (p[6] * Math.pow(s[1], p[7]) * Math.pow(s[0], p[12]) / ((Math.pow(p[8], p[7]) + Math.pow(s[1], p[7])) * (Math.pow(p[9], p[12]) + Math.pow(s[0], p[12])))))+  (1)*(1)* (p[14] * p[10] * s[1])+  (-1)*(1)* (p[13] * p[11] * s[0])); ' +
               'dydt_s.setVal(2, (1)*(1)* (p[13] * (p[3] * Math.pow(s[0], p[4]) / (Math.pow(p[5], p[4]) + Math.pow(s[0], p[4]))))+ '+
               ' (-1)*(1)* (p[14] * (p[6] * Math.pow(s[1], p[7]) * Math.pow(s[0], p[12]) / ((Math.pow(p[8], p[7]) + Math.pow(s[1], p[7])) * (Math.pow(p[9], p[12]) + Math.pow(s[0], p[12])))))+  (-1)*(1)* (p[14] * p[10] * s[1])); return dydt_s;');
  SetLength(a,0);
  SetLength(a,2);
  a[0] := 0.15; a[1] := 1.6;
  LSODAspecies.Add(Copy(a,0,MaxInt));
  setLength(b,0);
  setLength(b, 15);
  b[0] := 1.0; b[1] := 7.3; b[2] := 0.301; b[3] := 65; b[4] := 2.0; b[5] := 1.0;
  b[6] :=500; b[7] := 2; b[8] := 2; b[9] := 0.9; b[10] := 1; b[11] := 10; b[12] := 4;
  b[13] := 1; b[14] := 1;
  LSODAparams.Add(Copy(b,0,MaxInt));
  end;

function TLSODA_JSTests.LSODATests(): TList<TTestCaseResult>;
var i: integer;
    s: array of double;
    p: array of double;
begin

  for i := 0 to TESTS -1 do
    begin
     console.log('*** Beginning Test # ',i+1);
      // Load settings for test:
      s := self.getInitialValues(LSODAspecies.Items[i]);
      p := self.getInitialValues(LSODAparams.Items[i]);
      // Run test:
      self.runTest(self.LSODAeqs.Items[i], s, p, i);

      // Save results to file.
    end;
  Result := self.testResultList;
end;

function TLSODA_JSTests.getInitialValues(values: array of double): array of double;
var i, j: integer;
    val: array of double;

begin
  setLength(val,Length(values));
  for i := 0 to Length(values) -1 do
    begin
      val[i] := values[i];
    end;
  Result := val;
end;

procedure TLSODA_JSTests.runTest(eqs: string; species: array of double;
                              params: array of double; testIndex: integer);
var i, j: integer;
    stepSize: double;
    runTime: double;
    numSteps: Integer;
    dydt_s: TVector;
    y: TVector;
    tNext: double;
    time: double;
    curTestCase: TTestCaseResult;
    resultInfo: TList<string>; // holds any diffs between current result and ref result
    k: Integer;
begin
  curTestCase := TTestCaseResult.create(testIndex + 1, 'LSODA_JStests Eq' + inttostr(testIndex +1));
  self.solverOutput := '';
  stepSize := 0.1;
  runTime := 10;
  time := 0.0; // current time
  self.lode :=  TLsoda.create(length(species));
  for i := 1 to Length(species) do
  begin
    self.lode.rtol[i] := 1e-4;
    self.lode.atol[i] := 1e-6;
  end;
  self.lode.itol := 2;
  self.lode.itask := 1;
  self.lode.istate := 1;
  self.lode.iopt := 0;
  self.lode.jt := 2;

  asm
   //console.log('TForm1.runTest: LSODA Funct: ', eqs);
   var ODE_func = new Function('time', 's','p', eqs);
   this.lode.Setfcn (ODE_func);
  end;
  self.solverOutput := 'LSODA Funct: ' + eqs + sLineBreak;
  numSteps := Round(runTime/stepSize);
  lode.p := params; // set param vals.
  //outputStr := '';
  self.solverOutput := self.solverOutput + floattostr(time) + ': ';
  for k := 0 to Length(species)-1 do
    begin
      self.solverOutput := self.solverOutput + floattostr(species[k])+ ', ';
    end;
  self.solverOutput := self.solverOutput + sLineBreak;
  for i := 0 to numSteps -1 do
    begin
      tNext:= time + stepSize;
      y:= TVector.create(Length(species));
      for j := 1 to Length(species) do
      begin
        y[j]:= species[j-1];
      end;
      self.lode.Execute (y, time, tNext);
      time := tNext;

     // Convert TVector back to array of double ( y ->species)
      for j:= 0 to Length(species)-1 do
      begin
       species[j]:= y[j+1];
      end;
     // outputStr := '';
      self.solverOutput := self.solverOutput + floattostr(time) + ': ';
      for k := 0 to Length(species)-1 do
      begin
        self.solverOutput := self.solverOutput + floattostr(species[k])+ ', ';
      end;

      if self.lode.istate < 0 then
      begin
        self.solverOutput := self.solverOutput + 'Error, istate = ' + inttostr(self.lode.istate);
        console.log ('Error, istate = ', self.lode.istate);
      end;
      self.solverOutput := self.solverOutput + sLineBreak;

      tNext:= tNext + stepSize;
     end;  // for i loop

     // Record results:
     resultInfo := compareStrResults(self.solverOutput, getReferenceResult(testIndex));
     if resultInfo.count < 1 then
       begin
       curTestCase.testPass;
       end
     else
       begin
       curTestCase.testFail;
       for i := 0 to resultInfo.count -1 do
         curTestCase.sTestInfoList.Add(resultInfo[i]);
       end;
     testResultList.Add(curTestCase);
     console.log(self.solverOutput);
end;

function TLSODA_JSTests.getReferenceResult(index: integer): string;
begin
  if index < self.refResultsList.count then
    Result := self.refResultsList[index]
  else Result := '';
end;

procedure TLSODA_JSTests.buildReferenceResults();
begin
  self.refResultsList := TList<string>.create;
  self.refResultsList.Add( 'LSODA Funct: let dydt_s = pas.uVector.TVector.$create("create$1",[s.length]);dydt_s.setVal(2, (1)*(1)* (p[0] * Math.pow(s[0], 1)));dydt_s.setVal(3, (1)*(1)* (p[0] * Math.pow(s[0], 1))+  (-1)*(1)* (p[1] * Math.pow(s[2], 1)));dydt_s.setVal(1, (-1)*(1)* (p[0] * Math.pow(s[0], 1)));dydt_s.setVal(4, (1)*(1)* (p[1] * Math.pow(s[2], 1))); return dydt_s;' + sLineBreak +
'0: 11, 0.5, 0, 0, ' + sLineBreak +
'0.1: 9.95321256330616, 1.54678743669384, 0.995318017857194, 0.0514694188366495, ' + sLineBreak +
'0.2: 9.00603865865615, 2.49396134134385, 1.80120715445284, 0.19275418689101, ' + sLineBreak +
'0.3: 8.14900023359351, 3.35099976640649, 2.44470196855021, 0.406297797856279, ' + sLineBreak +
'0.4: 7.37352001360321, 4.12647998639679, 2.94941131169192, 0.677068674704866, ' + sLineBreak +
'0.5: 6.67183318537509, 4.82816681462491, 3.33593769022214, 0.992229124402778, ' + sLineBreak +
'0.6: 6.03692209511839, 5.46307790488161, 3.62218271494173, 1.34089518993988, ' + sLineBreak +
'0.7: 5.46244124610532, 6.03755875389468, 3.82368856355673, 1.71387019033795, ' + sLineBreak +
'0.8: 4.94262380021607, 6.55737619978393, 3.9540659702336, 2.10331022955033, ' + sLineBreak +
'0.9: 4.47227262886878, 7.02772737113122, 4.02500669693732, 2.5027206741939, ' + sLineBreak +
'1: 4.04667955385885, 7.45332044614115, 4.04664688055889, 2.90667356558226, ' + sLineBreak +
'1.1: 3.66158752792078, 7.83841247207922, 4.02771496630285, 3.31069750577638, ' + sLineBreak +
'1.2: 3.31314274417168, 8.18685725582832, 3.9757344554607, 3.71112280036762, ' + sLineBreak +
'1.3: 2.99785592083571, 8.50214407916429, 3.89717729802813, 4.10496678113616, ' + sLineBreak +
'1.4: 2.71257288427102, 8.78742711572898, 3.79756652907898, 4.48986058665, ' + sLineBreak +
'1.5: 2.4544407819045, 9.0455592180955, 3.68160913686353, 4.86395008123198, ' + sLineBreak +
'1.6: 2.22087832562738, 9.27912167437262, 3.5533062267633, 5.22581544760932, ' + sLineBreak +
'1.7: 2.00953610864666, 9.49046389135334, 3.41610913027324, 5.5743547610801, ' + sLineBreak +
'1.8: 1.81830716817414, 9.68169283182586, 3.27284061828088, 5.90885221354498, ' + sLineBreak +
'1.9: 1.64527636758831, 9.85472363241169, 3.125903008589, 6.22882062382269, ' + sLineBreak +
'2: 1.4887066675345, 10.0112933324655, 2.9773159679656, 6.53397736449991, ' + sLineBreak +
'2.1: 1.34704013491139, 10.1529598650886, 2.82868687384123, 6.82427299124738, ' + sLineBreak +
'2.2: 1.21885250800156, 10.2811474919984, 2.68139182913109, 7.09975566286735, ' + sLineBreak +
'2.3: 1.10286454917844, 10.3971354508216, 2.53650931651889, 7.36062613430267, ' + sLineBreak +
'2.4: 0.997915875194603, 10.5020841248054, 2.39491189097587, 7.60717223382953, ' + sLineBreak +
'2.5: 0.902951064856339, 10.5970489351437, 2.25730704431966, 7.839741890824, ' + sLineBreak +
'2.6: 0.817025496926579, 10.6829745030734, 2.12419629363533, 8.05877820943809, ' + sLineBreak +
'2.7: 0.739275638156935, 10.7607243618431, 1.99598199406899, 8.26474236777407, ' + sLineBreak +
'2.8: 0.668924447413327, 10.8310755525867, 1.87293460538497, 8.45814094720171, ' + sLineBreak +
'2.9: 0.605269320914644, 10.8947306790854, 1.75522615315764, 8.63950452592772, ' + sLineBreak +
'3: 0.547670247591452, 10.9523297524086, 1.6429639203689, 8.80936583203965, ' + sLineBreak +
'3.1: 0.495554569986096, 11.0044454300139, 1.53616569458344, 8.96827973543047, ' + sLineBreak +
'3.2: 0.448398308697113, 11.0516016913029, 1.43481527464328, 9.11678641665961, ' + sLineBreak +
'3.3: 0.405727077276046, 11.094272922724, 1.3388517209469, 9.25542120177706, ' + sLineBreak +
'3.4: 0.367117835407717, 11.1328821645923, 1.24815587269032, 9.38472629190197, ' + sLineBreak +
'3.5: 0.332182045328424, 11.1678179546716, 1.16259928674059, 9.50521866793098, ' + sLineBreak +
'3.6: 0.300570428411, 11.199429571589, 1.08202433650153, 9.61740523508747, ' + sLineBreak +
'3.7: 0.271968192590918, 11.2280318074091, 1.00625317696761, 9.72177863044148, ' + sLineBreak +
'3.8: 0.246086914409135, 11.2539130855909, 0.93510628021872, 9.81880680537215, ' + sLineBreak +
'3.9: 0.222668869456466, 11.2773311305435, 0.868386850220079, 9.90894428032346, ' + sLineBreak +
'4: 0.201479928855397, 11.2985200711446, 0.805895978782636, 9.99262409236197, ' + sLineBreak +
'4.1: 0.182306309398491, 11.3176936906015, 0.747437605706687, 10.0702560848948, ' + sLineBreak +
'4.2: 0.16495773386331, 11.3350422661367, 0.692806695130383, 10.1422355710063, ' + sLineBreak +
'4.3: 0.149260257881646, 11.3507397421184, 0.641804346696533, 10.2089353954218, ' + sLineBreak +
'4.4: 0.135056015427979, 11.364943984572, 0.594235986704062, 10.270707997868, ' + sLineBreak +
'4.5: 0.122204037907167, 11.3777959620928, 0.549907808078316, 10.3278881540145, ' + sLineBreak +
'4.6: 0.110574955300553, 11.3894250446994, 0.508635125914179, 10.3807899187853, ' + sLineBreak +
'4.7: 0.100052248465052, 11.3999477515349, 0.470238218726365, 10.4297095328086, ' + sLineBreak +
'4.8: 0.0905312436526862, 11.4094687563473, 0.434542476804068, 10.4749262795432, ' + sLineBreak +
'4.9: 0.0819160125918482, 11.4180839874082, 0.401382567475014, 10.5167014199331, ' + sLineBreak +
'5: 0.074120701200729, 11.4258792987993, 0.370598660974793, 10.5552806378245, ' + sLineBreak +
'5.1: 0.067067390692393, 11.4329326093076, 0.342038572324017, 10.5908940369836, ' + sLineBreak +
'5.2: 0.0606850134851673, 11.4393149865148, 0.315558331670501, 10.6237566548443, ' + sLineBreak +
'5.3: 0.0549101725844443, 11.4450898274156, 0.291020243574948, 10.6540695838406, ' + sLineBreak +
'5.4: 0.0496848972598987, 11.4503151027401, 0.268294659868958, 10.6820204428711, ' + sLineBreak +
'5.5: 0.0449566955368662, 11.4550433044631, 0.247259095406109, 10.707784209057, ' + sLineBreak +
'5.6: 0.0406786014934437, 11.4593213985066, 0.227797358474962, 10.7315240400316, ' + sLineBreak +
'5.7: 0.0368075374844637, 11.4631924625155, 0.209800584266047, 10.7533918782495, ' + sLineBreak +
'5.8: 0.0333048339904642, 11.4666951660095, 0.193166169167703, 10.7735289968418, ' + sLineBreak +
'5.9: 0.0301355565224056, 11.4698644434776, 0.177797704814539, 10.7920667386631, ' + sLineBreak +
'5.99999999999999: 0.0272677579750036, 11.472732242025, 0.163604991295332, 10.8091272507297, ' + sLineBreak +
'6.09999999999999: 0.0246729160601152, 11.4753270839399, 0.150503368625385, 10.8248237153145, ' + sLineBreak +
'6.19999999999999: 0.0223250416106743, 11.4776749583893, 0.138413707762538, 10.8392612506268, ' + sLineBreak +
'6.29999999999999: 0.0202005512220761, 11.4797994487779, 0.127262102437633, 10.8525373463403, ' + sLineBreak +
'6.39999999999999: 0.018278454196898, 11.4817215458031, 0.116979476927278, 10.8647420688758, ' + sLineBreak +
'6.49999999999999: 0.0165393585910625, 11.4834606414089, 0.107501483046659, 10.8759591583623, ' + sLineBreak +
'6.59999999999999: 0.014965443028882, 11.4850345569711, 0.0987681835940683, 10.8862663733771, ' + sLineBreak +
'6.69999999999999: 0.0135412449348827, 11.4864587550651, 0.0907236951451959, 10.8957350599199, ' + sLineBreak +
'6.79999999999999: 0.0122526560328807, 11.4877473439671, 0.0833159865258439, 10.9044313574413, ' + sLineBreak +
'6.89999999999999: 0.0110866153994359, 11.4889133846006, 0.0764966174874371, 10.9124167671131, ' + sLineBreak +
'6.99999999999999: 0.0100314218714818, 11.4899685781285, 0.0702206416028694, 10.9197479365256, ' + sLineBreak +
'7.09999999999999: 0.00907675547279295, 11.4909232445272, 0.0644464561507764, 10.9264767883764, ' + sLineBreak +
'7.19999999999999: 0.00821299436222295, 11.4917870056378, 0.0591353025095545, 10.9326517031282, ' + sLineBreak +
'7.29999999999999: 0.00743134466761019, 11.4925686553324, 0.0542511981121991, 10.9383174572202, ' + sLineBreak +
'7.39999999999999: 0.00672415236226396, 11.4932758476377, 0.0497610947293022, 10.9435147529084, ' + sLineBreak +
'7.49999999999999: 0.00608432993928184, 11.4939156700607, 0.0456342888612895, 10.9482813811994, ' + sLineBreak +
'7.59999999999999: 0.00550531949209949, 11.4944946805079, 0.0418422838962671, 10.9526523966116, ' + sLineBreak +
'7.69999999999999: 0.00498135602798026, 11.495018643972, 0.0383587851784148, 10.9566598587936, ' + sLineBreak +
'7.79999999999999: 0.00450729713898379, 11.495492702861, 0.0351594705559719, 10.960333232305, ' + sLineBreak +
'7.89999999999999: 0.00407835457134266, 11.4959216454287, 0.0322217130955884, 10.9636999323331, ' + sLineBreak +
'7.99999999999999: 0.00369018572524811, 11.4963098142748, 0.0295245844172419, 10.9667852298575, ' + sLineBreak +
'8.09999999999999: 0.00333899614867432, 11.4966610038513, 0.027049029671083, 10.9696119741802, ' + sLineBreak +
'8.19999999999999: 0.00302125768453896, 11.4969787423155, 0.0247772754566987, 10.9722014668588, ' + sLineBreak +
'8.29999999999999: 0.00273372711724685, 11.4972662728828, 0.0226928360915002, 10.9745734367913, ' + sLineBreak +
'8.39999999999999: 0.00247357124804948, 11.497526428752, 0.0207807098573769, 10.9767457188946, ' + sLineBreak +
'8.49999999999999: 0.00223820551842705, 11.4977617944816, 0.0190270413947336, 10.9787347530868, ' + sLineBreak +
'8.59999999999999: 0.0020252271318724, 11.4979747728681, 0.0174189599349622, 10.9805558129332, ' + sLineBreak +
'8.69999999999999: 0.00183247019221437, 11.4981675298078, 0.0159446121247309, 10.9822229176831, ' + sLineBreak +
'8.79999999999998: 0.00165807085427441, 11.4983419291457, 0.0145931945987393, 10.983748734547, ' + sLineBreak +
'8.89999999999998: 0.00150027769222858, 11.4984997223078, 0.0133546346958011, 10.985145087612, ' + sLineBreak +
'8.99999999999998: 0.00135748408385053, 11.4986425159162, 0.0122195872188154, 10.9864229286973, ' + sLineBreak +
'9.09999999999998: 0.00122828445340431, 11.4987717155466, 0.0111796185556837, 10.9875920969909, ' + sLineBreak +
'9.19999999999998: 0.00111139786073366, 11.4988886021393, 0.0102269471190148, 10.9886616550203, ' + sLineBreak +
'9.29999999999998: 0.00100563563346677, 11.4989943643665, 0.00935433243960544, 10.9896400319269, ' + sLineBreak +
'9.39999999999998: 0.000909924629147539, 11.4990900753709, 0.00855512898946096, 10.9905349463814, ' + sLineBreak +
'9.49999999999998: 0.000823334443125747, 11.4991766655569, 0.00782333992114538, 10.9913533256357, ' + sLineBreak +
'9.59999999999998: 0.000744990534875854, 11.4992550094651, 0.00715337251266742, 10.9921016369525, ' + sLineBreak +
'9.69999999999998: 0.000674087703725905, 11.4993259122963, 0.00654005494054586, 10.9927858573557, ' + sLineBreak +
'9.79999999999998: 0.000609929616227002, 11.4993900703838, 0.00597870382636619, 10.9934113665574, ' + sLineBreak +
'9.89999999999998: 0.000551883010161371, 11.4994481169898, 0.00546499794439177, 10.9939831190454, ' + sLineBreak +
'9.99999999999998: 0.00049936036106994, 11.4995006396389, 0.00499491648561618, 10.9945057231533, ' + sLineBreak );
  self.refResultsList.Add('LSODA Funct: let dydt_s = pas.uVector.TVector.$create("create$1",[s.length]);dydt_s.setVal(2, (1)*(1)* (p[0] * Math.pow(s[0], 1)));dydt_s.setVal(3, (1)*(1)* (p[0] * Math.pow(s[0], 1))+  (-1)*(1)* (p[1] * Math.pow(s[2], 1)));dydt_s.setVal(1, (-1)*(1)* (p[0] * Math.pow(s[0], 1)));dydt_s.setVal(4, (1)*(1)* (p[1] * Math.pow(s[2], 1))); return dydt_s;' + sLineBreak +
'0: 11, 0.5, 0.2, 0.1, ' + sLineBreak +
'0.1: 9.95321645034871, 1.54678354965129, 1.17627323926609, 0.170510310385203, ' + sLineBreak +
'0.2: 9.00604485156732, 2.49395514843268, 1.96493209731941, 0.329023051113274, ' + sLineBreak +
'0.3: 8.14900541958439, 3.35099458041561, 2.59284943249747, 0.558145147918141, ' + sLineBreak +
'0.4: 7.37352098599965, 4.12647901400035, 3.0834758350981, 0.843003178902246, ' + sLineBreak +
'0.5: 6.67183680237137, 4.82816319762862, 3.45723186233004, 1.17093133529858, ' + sLineBreak +
'0.6: 6.03692661373894, 5.46307338626106, 3.73192976193867, 1.53114362432239, ' + sLineBreak +
'0.7: 5.46243235378314, 6.03756764621686, 3.92305355579059, 1.91451409042626, ' + sLineBreak +
'0.8: 4.94260130625963, 6.55739869374036, 4.04403570930473, 2.31336298443564, ' + sLineBreak +
'0.9: 4.47225509233909, 7.02774490766091, 4.10639522750629, 2.72134968015462, ' + sLineBreak +
'1: 4.04668769212804, 7.45331230787195, 4.12017052004483, 3.13314178782713, ' + sLineBreak +
'1.1: 3.66160180879753, 7.83839819120247, 4.0942091892212, 3.54418900198127, ' + sLineBreak +
'1.2: 3.3131582107617, 8.1868417892383, 4.03589463651291, 3.95094715272539, ' + sLineBreak +
'1.3: 2.99786848336239, 8.5021315166376, 3.95162830744784, 4.35050320918976, ' + sLineBreak +
'1.4: 2.71258268892503, 8.78741731107496, 3.846852605915, 4.74056470515996, ' + sLineBreak +
'1.5: 2.45444643706679, 9.0455535629332, 3.72622468135994, 5.11932888157326, ' + sLineBreak +
'1.6: 2.22087777896943, 9.27912222103056, 3.59370126129599, 5.48542095973457, ' + sLineBreak +
'1.7: 2.00953562393, 9.49046437606999, 3.45265750618795, 5.83780686988205, ' + sLineBreak +
'1.8: 1.81830353596563, 9.68169646403436, 3.30592451389866, 6.1757719501357, ' + sLineBreak +
'1.9: 1.64526980450571, 9.85473019549429, 3.15585116539874, 6.49887903009555, ' + sLineBreak +
'2: 1.48870253515826, 10.0112974648417, 3.00440133378158, 6.80689613106015, ' + sLineBreak +
'2.1: 1.34703616650025, 10.1529638334997, 2.8531899668761, 7.09977386662364, ' + sLineBreak +
'2.2: 1.21884899983211, 10.2811510001679, 2.70355776134587, 7.37759323882202, ' + sLineBreak +
'2.3: 1.1028619318039, 10.3971380681961, 2.55655987146953, 7.64057819672656, ' + sLineBreak +
'2.4: 0.997910829495486, 10.5020891705045, 2.41306335384889, 7.88902581665561, ' + sLineBreak +
'2.5: 0.902947983123129, 10.5970520168769, 2.27372345813445, 8.12332855874241, ' + sLineBreak +
'2.6: 0.817021486896609, 10.6829785131034, 2.13905251626172, 8.34392599684166, ' + sLineBreak +
'2.7: 0.739272237263313, 10.7607277627367, 2.0094208154097, 8.55130694732698, ' + sLineBreak +
'2.8: 0.668921951349765, 10.8310780486502, 1.88508938116365, 8.74598866748658, ' + sLineBreak +
'2.9: 0.605265786881668, 10.8947342131183, 1.76622632250773, 8.92850789061059, ' + sLineBreak +
'3: 0.547667908862129, 10.9523320911379, 1.65291268389196, 9.0994194072459, ' + sLineBreak +
'3.1: 0.495550402740595, 11.0044495972594, 1.5451732677481, 9.2592763295113, ' + sLineBreak +
'3.2: 0.448393176915354, 11.0516068230846, 1.44296879031739, 9.40863803276725, ' + sLineBreak +
'3.3: 0.40572313643599, 11.094276863564, 1.34622449514389, 9.54805236842011, ' + sLineBreak +
'3.4: 0.367115003578139, 11.1328849964219, 1.25482177621212, 9.67806322020973, ' + sLineBreak +
'3.5: 0.332181140645792, 11.1678188593542, 1.16862327530665, 9.79919558404755, ' + sLineBreak +
'3.6: 0.300569800466573, 11.1994301995334, 1.0874727474853, 9.91195745204812, ' + sLineBreak +
'3.7: 0.271967407237948, 11.228032592762, 1.01118291984863, 10.0168496729134, ' + sLineBreak +
'3.8: 0.246086420309188, 11.2539135796908, 0.939566324434081, 10.1143472552567, ' + sLineBreak +
'3.9: 0.222668003423057, 11.2773319965769, 0.872424038897579, 10.2049079576794, ' + sLineBreak +
'4: 0.201478879448662, 11.2985211205513, 0.809550176914364, 10.288970943637, ' + sLineBreak +
'4.1: 0.18230556693307, 11.3176944330669, 0.750743162174313, 10.3669512708926, ' + sLineBreak +
'4.2: 0.164957146222985, 11.335042853777, 0.695796442238888, 10.4392464115381, ' + sLineBreak +
'4.3: 0.149259957863101, 11.3507400421369, 0.644508018001047, 10.5062320241358, ' + sLineBreak +
'4.4: 0.135055812640344, 11.3649441873596, 0.596681876723781, 10.5682623106359, ' + sLineBreak +
'4.5: 0.122203729766105, 11.3777962702339, 0.552121246040245, 10.6256750241936, ' + sLineBreak +
'4.6: 0.110574646749535, 11.3894253532505, 0.510638173784629, 10.6787871794658, ' + sLineBreak +
'4.7: 0.10005197196493, 11.3999480280351, 0.472050734343092, 10.727897293692, ' + sLineBreak +
'4.8: 0.0905310257240746, 11.4094689742759, 0.436182510267152, 10.7732864640088, ' + sLineBreak +
'4.9: 0.0819158795087386, 11.4180841204913, 0.402866304473658, 10.8152178160176, ' + sLineBreak +
'5: 0.0741206118605893, 11.4258793881394, 0.371940885089895, 10.8539385030495, ' + sLineBreak +
'5.1: 0.0670673579955667, 11.4329326420044, 0.343252750934945, 10.8896798910695, ' + sLineBreak +
'5.2: 0.0606849896241182, 11.4393150103759, 0.316656954750887, 10.922658055625, ' + sLineBreak +
'5.3: 0.0549101089017891, 11.4450898910982, 0.292014527603266, 10.9530753634949, ' + sLineBreak +
'5.4: 0.0496848358061752, 11.4503151641938, 0.269194503937002, 10.9811206602568, ' + sLineBreak +
'5.5: 0.0449566278162056, 11.4550433721838, 0.248073359263169, 11.0069700129206, ' + sLineBreak +
'5.6: 0.0406785395283286, 11.4593214604717, 0.228534123288277, 11.0307873371834, ' + sLineBreak +
'5.7: 0.0368075126451519, 11.4631924873548, 0.210467173491131, 11.0527253138637, ' + sLineBreak +
'5.8: 0.0333047981530076, 11.466695201847, 0.193769288493643, 11.0729259133533, ' + sLineBreak +
'5.9: 0.0301355245014235, 11.4698644754986, 0.178343395564894, 11.0915210799337, ' + sLineBreak +
'5.99999999999999: 0.027267739838314, 11.4727322601617, 0.164098757644336, 11.1086335025173, ' + sLineBreak +
'6.09999999999999: 0.0246728805721759, 11.4753271194278, 0.150950206559023, 11.1243769128688, ' + sLineBreak +
'6.19999999999999: 0.0223250115251072, 11.4776749884749, 0.138818080920806, 11.1388569075541, ' + sLineBreak +
'6.29999999999999: 0.0202004776860313, 11.479799522314, 0.127628004538082, 11.1521715177759, ' + sLineBreak +
'6.39999999999999: 0.0182781801707767, 11.4817218198292, 0.117310541623714, 11.1644112782055, ' + sLineBreak +
'6.49999999999999: 0.0165388224877164, 11.4834611775123, 0.107800955790567, 11.1756602217217, ' + sLineBreak +
'6.59999999999999: 0.0149649788489075, 11.4850350211511, 0.099038947398939, 11.1859960737521, ' + sLineBreak +
'6.69999999999999: 0.0135410901871102, 11.4864589098129, 0.0909683943856375, 11.1954905154272, ' + sLineBreak +
'6.79999999999999: 0.0122527504788981, 11.4877472495211, 0.0835370638367923, 11.2042101856843, ' + sLineBreak +
'6.89999999999999: 0.0110867359560988, 11.4889132640439, 0.0766963697815447, 11.2122168942623, ' + sLineBreak +
'6.99999999999999: 0.0100316539404163, 11.4899683460596, 0.0704012698201454, 11.2195670762394, ' + sLineBreak +
'7.09999999999999: 0.00907703501295516, 11.490922964987, 0.0646098750425637, 11.2263130899445, ' + sLineBreak +
'7.19999999999999: 0.00821319159154403, 11.4917868084085, 0.0592832012356603, 11.2325036071728, ' + sLineBreak +
'7.29999999999999: 0.00743146240148875, 11.4925685375985, 0.0543851915021176, 11.2381833460964, ' + sLineBreak +
'7.39999999999999: 0.006724214998805, 11.4932757850012, 0.0498826030747047, 11.2433931819265, ' + sLineBreak +
'7.49999999999999: 0.0060843207043536, 11.4939156792956, 0.0457444503683366, 11.2481712289273, ' + sLineBreak +
'7.59999999999999: 0.00550525353227098, 11.4944947464677, 0.0419419899858031, 11.2525527564819, ' + sLineBreak +
'7.69999999999999: 0.00498134697751241, 11.4950186530225, 0.0384489427845813, 11.2565697102379, ' + sLineBreak +
'7.79999999999999: 0.00450735973673449, 11.4954926402633, 0.0352409114504423, 11.2602517288128, ' + sLineBreak +
'7.89999999999999: 0.00407843080014148, 11.4959215691999, 0.0322952512740893, 11.2636263179258, ' + sLineBreak +
'7.99999999999999: 0.00369025830839125, 11.4963097416916, 0.0295911063016592, 11.2667186353899, ' + sLineBreak +
'8.09999999999999: 0.00333905924072512, 11.4966609407593, 0.027109266659523, 11.2695516740997, ' + sLineBreak +
'8.19999999999999: 0.00302129160956269, 11.4969787083904, 0.0248318478380221, 11.2721468605524, ' + sLineBreak +
'8.29999999999999: 0.00273372547137501, 11.4972662745286, 0.0227422829377819, 11.2745239915908, ' + sLineBreak +
'8.39999999999999: 0.00247354946003097, 11.49752645054, 0.0208255634117827, 11.2767008871282, ' + sLineBreak +
'8.49999999999999: 0.00223816263052548, 11.4977618373695, 0.019067717715947, 11.2786941196535, ' + sLineBreak +
'8.59999999999999: 0.00202516341949584, 11.4979748365805, 0.0174557671644939, 11.280519069416, ' + sLineBreak +
'8.69999999999999: 0.00183242806610805, 11.4981675719339, 0.0159778754607215, 11.2821896964732, ' + sLineBreak +
'8.79999999999998: 0.00165806119214852, 11.4983419388078, 0.0146232133151189, 11.2837187254927, ' + sLineBreak +
'8.89999999999998: 0.00150029066376858, 11.4984997093362, 0.0133817000058658, 11.2851180093304, ' + sLineBreak +
'8.99999999999998: 0.00135749816994828, 11.49864250183, 0.012244029641253, 11.2863984721888, ' + sLineBreak +
'9.09999999999998: 0.00122829936302168, 11.498771700637, 0.0112017530566745, 11.2875699475803, ' + sLineBreak +
'9.19999999999998: 0.00111140534388577, 11.4988885946561, 0.0102470132211342, 11.288641581435, ' + sLineBreak +
'9.29999999999998: 0.00100562782749887, 11.4989943721725, 0.00937250908572863, 11.2896218630868, ' + sLineBreak +
'9.39999999999998: 0.000909913831602921, 11.4990900861684, 0.00857161691370284, 11.2905184692547, ' + sLineBreak +
'9.49999999999998: 0.000823322235218549, 11.4991766777648, 0.00783830055932165, 11.2913383772055, ' + sLineBreak +
'9.59999999999998: 0.000744975844385257, 11.4992550241556, 0.00716692570437918, 11.2920880984512, ' + sLineBreak +
'9.69999999999998: 0.000674073471899633, 11.4993259265281, 0.00655229823787604, 11.2927736282902, ' + sLineBreak +
'9.79999999999998: 0.000609925075918616, 11.4993900749241, 0.00598975301098066, 11.2934003219131, ' + sLineBreak +
'9.89999999999998: 0.000551887557066213, 11.4994481124429, 0.00547495454179655, 11.2939731579011, ' + sLineBreak +
'9.99999999999998: 0.00049936589437079, 11.4995006341056, 0.00500388710147075, 11.2944967470041, ' + sLineBreak );

// Test 3 ref:
  self.refResultsList.Add('LSODA Funct: let dydt_s = pas.uVector.TVector.$create("create$1",[s.length]); dydt_s.setVal(1, (1)*(1)* (p[13] * p[0])+  (1)*(1)* (p[13] * p[1] * p[2])+  (-1)*(1)* (p[13] * (p[3] * Math.pow(s[0], p[4]) / (Math.pow(p[5], p[4]) + Math.pow(s[0], p[4]))))+  (1)*(1)* (p[14] * (p[6] * Math.pow(s[1], p[7]) * Math.pow(s[0], p[12]) / ((Math.pow(p[8], p[7]) + Math.pow(s[1], p[7])) * (Math.pow(p[9], p[12]) + Math.pow(s[0], p[12])))))+  (1)*(1)* (p[14] * p[10] * s[1])+  (-1)*(1)* (p[13] * p[11] * s[0])); dydt_s.setVal(2, (1)*(1)* (p[13] * (p[3] * Math.pow(s[0], p[4]) / (Math.pow(p[5], p[4]) + Math.pow(s[0], p[4]))))+  (-1)*(1)* (p[14] * (p[6] * Math.pow(s[1], p[7]) * Math.pow(s[0], p[12]) / ((Math.pow(p[8], p[7]) + Math.pow(s[1], p[7])) * (Math.pow(p[9], p[12]) + Math.pow(s[0], p[12])))))+  (-1)*(1)* (p[14] * p[10] * s[1])); return dydt_s;' + sLineBreak +
'0: 0.15, 1.6, ' + sLineBreak +
'0.1: 0.226087004770655, 1.6420654325247, ' + sLineBreak +
'0.2: 0.238195066870046, 1.71649070383551, ' + sLineBreak +
'0.3: 0.24509035159076, 1.78759064212089, ' + sLineBreak +
'0.4: 0.251602473790861, 1.8524641148523, ' + sLineBreak +
'0.5: 0.258261866713154, 1.91061874968721, ' + sLineBreak +
'0.6: 0.265179551695561, 1.9617326229455, ' + sLineBreak +
'0.7: 0.272435301279054, 2.00542854695674, ' + sLineBreak +
'0.8: 0.280132834911721, 2.04121456185343, ' + sLineBreak +
'0.9: 0.288426940247759, 2.06842070692235, ' + sLineBreak +
'1: 0.297573526261187, 2.08607137061909, ' + sLineBreak +
'1.1: 0.308057161058164, 2.09259789325654, ' + sLineBreak +
'1.2: 0.320956354983337, 2.08511395199684, ' + sLineBreak +
'1.3: 0.339551228318163, 2.0566922891376, ' + sLineBreak +
'1.4: 0.383816622691634, 1.97515717762561, ' + sLineBreak +
'1.5: 1.27558848752728, 0.684475197303976, ' + sLineBreak +
'1.6: 0.517358288798962, 0.873103532918321, ' + sLineBreak +
'1.7: 0.224544700449751, 1.17145004231614, ' + sLineBreak +
'1.8: 0.211888856058862, 1.28950474113781, ' + sLineBreak +
'1.9: 0.216531194106569, 1.39061152844529, ' + sLineBreak +
'2: 0.22227164696286, 1.48522091137333, ' + sLineBreak +
'2.1: 0.228170854549333, 1.57383940582665, ' + sLineBreak +
'2.2: 0.234185477221962, 1.65635034833676, ' + sLineBreak +
'2.3: 0.240325497516149, 1.73264301805305, ' + sLineBreak +
'2.4: 0.246612514676857, 1.80256518244761, ' + sLineBreak +
'2.5: 0.253083191151316, 1.86587139829761, ' + sLineBreak +
'2.6: 0.259758357018158, 1.92243794286155, ' + sLineBreak +
'2.7: 0.266703672652043, 1.97190598506723, ' + sLineBreak +
'2.8: 0.274039247553804, 2.0139341506951, ' + sLineBreak +
'2.9: 0.281875046248493, 2.04789191074524, ' + sLineBreak +
'3: 0.290348977129204, 2.07300655679696, ' + sLineBreak +
'3.1: 0.299713899110994, 2.08832472618702, ' + sLineBreak +
'3.2: 0.310546989600797, 2.09213586328869, ' + sLineBreak +
'3.3: 0.324156456929644, 2.08111269804354, ' + sLineBreak +
'3.4: 0.344917880033028, 2.04648155899468, ' + sLineBreak +
'3.5: 0.407576186430261, 1.93594348891585, ' + sLineBreak +
'3.6: 1.11567814045484, 0.668048028906537, ' + sLineBreak +
'3.7: 0.394096449561334, 0.969636265982735, ' + sLineBreak +
'3.8: 0.217154406903732, 1.19881196794983, ' + sLineBreak +
'3.9: 0.2125396511263, 1.31048192364308, ' + sLineBreak +
'4: 0.217661138053279, 1.41012323817589, ' + sLineBreak +
'4.1: 0.223448882678062, 1.50352589703261, ' + sLineBreak +
'4.2: 0.229370858404959, 1.59093068731363, ' + sLineBreak +
'4.3: 0.235408759683176, 1.67219892851666, ' + sLineBreak +
'4.4: 0.241577549377145, 1.74721134393447, ' + sLineBreak +
'4.5: 0.247899335473197, 1.81581963180283, ' + sLineBreak +
'4.6: 0.254408195296741, 1.87782295615689, ' + sLineBreak +
'4.7: 0.261147565027983, 1.93296982289, ' + sLineBreak +
'4.8: 0.268186431978931, 1.98091350224791, ' + sLineBreak +
'4.9: 0.275605182741219, 2.02126141434889, ' + sLineBreak +
'5: 0.283516326211344, 2.05344963472631, ' + sLineBreak +
'5.1: 0.292078143169965, 2.07676265789511, ' + sLineBreak +
'5.2: 0.30165072700509, 2.09014400146053, ' + sLineBreak +
'5.3: 0.312889896460789, 2.09152932223308, ' + sLineBreak +
'5.4: 0.327403226226143, 2.07695094643075, ' + sLineBreak +
'5.5: 0.351241232126132, 2.03484024242828, ' + sLineBreak +
'5.6: 0.456059126622224, 1.86594291358644, ' + sLineBreak +
'5.7: 0.957720518873887, 0.68142336547856, ' + sLineBreak +
'5.8: 0.311690426529468, 1.04599356916113, ' + sLineBreak +
'5.9: 0.21351076986153, 1.22350550972034, ' + sLineBreak +
'5.99999999999999: 0.213408706370831, 1.33109859134898, ' + sLineBreak +
'6.09999999999999: 0.218808885491967, 1.42939912365344, ' + sLineBreak +
'6.19999999999999: 0.22463164994889, 1.52159835401997, ' + sLineBreak +
'6.29999999999999: 0.23057679215151, 1.60775600402253, ' + sLineBreak +
'6.39999999999999: 0.236637824295211, 1.68778068752511, ' + sLineBreak +
'6.49999999999999: 0.242833363875569, 1.7615210076098, ' + sLineBreak +
'6.59999999999999: 0.249190909120064, 1.82878776393662, ' + sLineBreak +
'6.69999999999999: 0.255730383430683, 1.88945299310379, ' + sLineBreak +
'6.79999999999999: 0.262504415695585, 1.94321175045437, ' + sLineBreak +
'6.89999999999999: 0.269600801282428, 1.98976542541326, ' + sLineBreak +
'6.99999999999999: 0.277141782267445, 2.02860451049228, ' + sLineBreak +
'7.09999999999999: 0.285203249390094, 2.05908577782046, ' + sLineBreak +
'7.19999999999999: 0.293984389085567, 2.08040658234085, ' + sLineBreak +
'7.29999999999999: 0.303819490079807, 2.09142488862388, ' + sLineBreak +
'7.39999999999999: 0.315522732385038, 2.08996977483966, ' + sLineBreak +
'7.49999999999999: 0.331115828093549, 2.07123783833107, ' + sLineBreak +
'7.59999999999999: 0.359162546384098, 2.01971310106462, ' + sLineBreak +
'7.69999999999999: 0.624719746526184, 1.65740254094554, ' + sLineBreak +
'7.79999999999999: 0.808458187946599, 0.717736509943808, ' + sLineBreak +
'7.89999999999999: 0.264301240029182, 1.10028332768845, ' + sLineBreak +
'7.99999999999999: 0.211982696196342, 1.24659392720204, ' + sLineBreak +
'8.09999999999999: 0.214399246430258, 1.35140780850346, ' + sLineBreak +
'8.19999999999999: 0.219967443156406, 1.44843489543621, ' + sLineBreak +
'8.29999999999999: 0.225819032761888, 1.53943047041635, ' + sLineBreak +
'8.39999999999999: 0.231786852677205, 1.62438396062131, ' + sLineBreak +
'8.49999999999999: 0.237873304808309, 1.70316790203271, ' + sLineBreak +
'8.59999999999999: 0.244103366807184, 1.77560607739463, ' + sLineBreak +
'8.69999999999999: 0.25049675136782, 1.84156570886375, ' + sLineBreak +
'8.79999999999998: 0.257082651761346, 1.90085457104943, ' + sLineBreak +
'8.89999999999998: 0.26391137856796, 1.95318150092045, ' + sLineBreak +
'8.99999999999998: 0.271066308475025, 1.99820946605227, ' + sLineBreak +
'9.09999999999998: 0.278705474762138, 2.03543984588679, ' + sLineBreak +
'9.19999999999998: 0.286896930577562, 2.06417419825895, ' + sLineBreak +
'9.29999999999998: 0.295869726289035, 2.08351348396926, ' + sLineBreak +
'9.39999999999998: 0.306010922287102, 2.09216816330511, ' + sLineBreak +
'9.49999999999998: 0.31828152818409, 2.08759882463527, ' + sLineBreak +
'9.59999999999998: 0.335188047575405, 2.06419586583426, ' + sLineBreak +
'9.69999999999998: 0.369520569930244, 2.00012776606418, ' + sLineBreak +
'9.79999999999998: 1.28163710525046, 0.872269388277919, ' + sLineBreak +
'9.89999999999998: 0.659818214103967, 0.78303966389147, ' + sLineBreak +
'9.99999999999998: 0.23826535131269, 1.14035989804074, ' + sLineBreak);

end;

end.









